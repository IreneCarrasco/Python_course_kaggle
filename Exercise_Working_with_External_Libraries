# After completing the exercises on lists and tuples, Jimmy noticed that, according to his estimate_average_slot_payout function, 
# the slot machines at the Learn Python Casino are actually rigged against the house, and are profitable to play in the long run.
# Starting with $200 in his pocket, Jimmy has played the slots 500 times, recording his new balance in a list after each spin. 
# He used Python's matplotlib library to make a graph of his balance over time:

# Import the jimmy_slots submodule
from learntools.python import jimmy_slots
# Call the get_graph() function to get Jimmy's graph
graph = jimmy_slots.get_graph()
graph

# As you can see, he's hit a bit of bad luck recently. He wants to tweet this along with some choice emojis, but, as it looks right now, 
# his followers will probably find it confusing. He's asked if you can help him make the following changes:
#   Add the title "Results of 500 slot machine pulls"
#   Make the y-axis start at 0.
#   Add the label "Balance" to the y-axis.
# After calling type(graph) you see that Jimmy's graph is of type matplotlib.axes._subplots.AxesSubplot. Hm, that's a new one. 
# By calling dir(graph), you find three methods that seem like they'll be useful: .set_title(), .set_ylim(), and .set_ylabel().
# Use these methods to complete the function prettify_graph according to Jimmy's requests. We've already checked off the first request for you (setting a title).
# (Remember: if you don't know what these methods do, use the help() function!)

def prettify_graph(graph):
    """Modify the given graph according to Jimmy's requests: add a title, make the y-axis
    start at 0, label the y-axis. (And, if you're feeling ambitious, format the tick marks
    as dollar amounts using the "$" symbol.)
    """
    graph.set_title("Results of 500 slot machine pulls")
    # Complete steps 2 and 3 here

graph = jimmy_slots.get_graph()
prettify_graph(graph)
graph


# Suppose we wanted to create a new type to represent hands in blackjack. One thing we might want to do with this type is overload 
# the comparison operators like > and <= so that we could use them to check whether one hand beats another. e.g. it'd be cool if we could do this:
#   >>> hand1 = BlackjackHand(['K', 'A'])
#   >>> hand2 = BlackjackHand(['7', '10', 'A'])
#   >>> hand1 > hand2
#   True
# Well, we're not going to do all that in this question (defining custom classes is a bit beyond the scope of these lessons), 
# but the code we're asking you to write in the function below is very similar to what we'd have to write if we were defining our own BlackjackHand class. 
# (We'd put it in the __gt__ magic method to define our custom behaviour for >.)
# Fill in the body of the blackjack_hand_greater_than function according to the docstring.
def blackjack_hand_greater_than(hand_1, hand_2):
    """
    Return True if hand_1 beats hand_2, and False otherwise.
    
    In order for hand_1 to beat hand_2 the following must be true:
    - The total of hand_1 must not exceed 21
    - The total of hand_1 must exceed the total of hand_2 OR hand_2's total must exceed 21
    
    Hands are represented as a list of cards. Each card is represented by a string.
    
    When adding up a hand's total, cards with numbers count for that many points. Face
    cards ('J', 'Q', and 'K') are worth 10 points. 'A' can count for 1 or 11.
    
    When determining a hand's total, you should try to count aces in the way that 
    maximizes the hand's total without going over 21. e.g. the total of ['A', 'A', '9'] is 21,
    the total of ['A', 'A', '9', '3'] is 14.
    
    Examples:
    >>> blackjack_hand_greater_than(['K'], ['3', '4'])
    True
    >>> blackjack_hand_greater_than(['K'], ['10'])
    False
    >>> blackjack_hand_greater_than(['K', 'K', '2'], ['3'])
    False
    """
def hand_total(hand):
    """Helper function to calculate the total points of a blackjack hand.
    """
    total = 0
    # Count the number of aces and deal with how to apply them at the end.
    aces = 0
    for card in hand:
        if card in ['J', 'Q', 'K']:
            total += 10
        elif card == 'A':
            aces += 1
        else:
            # Convert number cards (e.g. '7') to ints
            total += int(card)
    # At this point, total is the sum of this hand's cards *not counting aces*.

    # Add aces, counting them as 1 for now. This is the smallest total we can make from this hand
    total += aces
    # "Upgrade" aces from 1 to 11 as long as it helps us get closer to 21
    # without busting
    while total + 10 <= 21 and aces > 0:
        # Upgrade an ace from 1 to 11
        total += 10
        aces -= 1
    return total    

def blackjack_hand_greater_than(hand_1, hand_2):
    total_1 = hand_total(hand_1)
    total_2 = hand_total(hand_2)
    return total_1 <= 21 and (total_1 > total_2 or total_2 > 21)
